import React from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';

// Components
import AssignedTaskIndex from '../../components/tasks/assigned_task_index';

// Actions
import { fetchAssignedTaskList, updateAssignedTask } from '../../actions/task_actions';


class TaskOverview extends React.Component {
  static propTypes = {
    dispatchFetchAssignedTaskList: PropTypes.func.isRequired,
    dispatchUpdateAssignedTask: PropTypes.func.isRequired,
    currentUser: PropTypes.object.isRequired,
    assignedTasks: PropTypes.object.isRequired
  }

  // TODO: Is it possible to have server send me a custom greeting message when connection is opened?
  handleChannelOnConnect = () => {
    console.log('Channel is connected'); // Anyways, holy shit took me long enough to figure this one out
    this.socket.perform('receive', { message: 'Hello' });
  };

  handleChannelOnDisconnect = (msg) => {
    console.log('Channel is closed', msg);
  }

  handleChannelOnReceive = (payload) => {
    console.log(payload);
  }

  componentDidMount() {
    const channelParams = {
      channel: 'TasksChannel',
      current_user_id: this.props.currentUser.id
    };

    const channelHandlers = {
      received: this.handleChannelOnReceive,
      connected: this.handleChannelOnConnect,
      disconnected: this.handleChannelOnDisconnect
    };

    // Holy shit, App.cable is auto-generated by Rails!!!
    this.socket = App.cable.subscriptions.create(channelParams, channelHandlers);
    this.props.dispatchFetchAssignedTaskList(this.props.currentUser.id);
  }

  render() {
    return (
      <div className="task-overview">
        <h1>Task Overview</h1>
        <AssignedTaskIndex
          assignedTasks={this.props.assignedTasks}
          dispatchUpdateAssignedTask={this.props.dispatchUpdateAssignedTask} />
      </div>
    );
  }
}

const mapStateToProps = (state) => ({
  currentUser: state.sessions.currentUser,
  assignedTasks: state.tasks.assigned
});

const mapDispatchToProps = (dispatch) => ({
  dispatchUpdateAssignedTask: (task) => dispatch(updateAssignedTask(task)), // TODO: change task action accepted arguments
  dispatchFetchAssignedTaskList: (userId) => dispatch(fetchAssignedTaskList(userId))
});

export default connect(mapStateToProps, mapDispatchToProps)(TaskOverview);
